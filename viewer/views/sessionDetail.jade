//- Standard method to print an array of values with commas
mixin arrayList(values, title, expr, extra)
  if (values || extra)
    dt #{title}
    dd
      each value,i in values 
        if (i > 0)
          |, 
        if (value.length == 0)
          a(href='#', onclick='return addExpression("#{expr} == \\\"#{value}\\\"");') &lt;empty&gt;
        else
          a(href='#', onclick='return addExpression("#{expr} == \\\"#{value}\\\"");') #{value}
      if (extra)
        if (values)
          |, 
        !{extra}

//- Standard method to print ip, port, geo, and asn info
mixin ipPrint(ip,port,geo,as,expr)
  - var ipstr = (ip>>24 & 0xff) + '.' + (ip>>16 & 0xff) + '.' + (ip>>8 & 0xff) + '.' + (ip & 0xff); 
  a(href='#', onclick='return addExpression("ip.#{expr} == #{ipstr}");') #{ipstr}
  - if (port)
    | :
    a(href='#', onclick='return addExpression("port.#{expr} == #{port}");') #{port}

  - if (geo)
    |  (
    a(href='#', onclick='return addExpression("country.#{expr} == #{geo}");') #{geo}
    |)
  - if (as)
    |  [
    a(href='#', onclick='return addExpression("asn.#{expr} == \\\"#{as}\\\"");') #{as}
    |]

//- Standard method to print ip info with commas
mixin ipArrayList(values, geos, ass, title, expr)
  if (values)
    dt #{title}
    dd
      each ip,i in values 
        if (i > 0)
          |, 
        mixin ipPrint(values[i], undefined, geos[i], ass[i], expr)

//- Start of page
div.sessionDetail(id='sessionDetail#{session.id}',sessionid='#{session.id}')
  div.sessionDetailToolbar 
    if (session.ro)
      li 
        a(href='#', onclick='return addExpression("rootId == #{session.ro}");') All Sessions
      li 
        a(href='#{session.no}/pcap/#{session.id}.pcap') Download Segment Pcap
      li 
        a(href='#{session.no}/entirePcap/#{session.ro}.pcap') Download Entire Pcap
    else
      li 
        a(href='#{session.no}/pcap/#{session.id}.pcap') Download Pcap
    li
      a(href='#{session.no}/raw/#{session.id}?type=src') Source Raw
    li
      a(href='#{session.no}/raw/#{session.id}?type=dst') Destination Raw
    li
      a(href='?expression=id=#{session.id}&date=-1&openAll=1') Permalink
    li
      label.sessionActionsMenu Actions 
        img#actionsButtonArrow(src="down-arrow.png")
  dl.sessionDetailMeta
    dt Start
    dd
      a(href='#', onclick='return setSessionStartTime(#{session.fp});')
        span(id='startTime-#{session.id}')
      | &nbsp;
      | Stop: 
      a(href='#', onclick='return setSessionStopTime(#{session.lp});')
        span(id='stopTime-#{session.id}')
      | &nbsp;
      | Node: 
      a(href='#', onclick='return addExpression("node == #{session.no}");') #{session.no}
      | &nbsp;
      | IP Protocol: 
      a(href='#', onclick='return addExpression("protocol == #{session.pr}");') #{session.pr}

    mixin arrayList(session.user, "Users", "user")

    dt Src IP/Port
    dd
      mixin ipPrint(session.a1, session.p1, session.g1, session.as1, "src")
      |  Dst IP/Port: 
      mixin ipPrint(session.a2, session.p2, session.g2, session.as2, "dst")
    mixin arrayList(session.ta, "Tags", "tags", "<img class=\"addTagsAction\" src=\"DataTables-1.9.1/examples/examples_support/details_open.png\">")
    if (session.fs && session.fs.length > 0)
      mixin arrayList(session.fs, "Files", "file")
    if (session.scrubby)
      dt Scrubbed
      dd By Moloch user #{session.scrubby} at #{new Date(session.scrubat)}


  if (session.ho || session.ua || session.hh1 || session.hh2 || session.xff)
    div.sessionDetailMeta.bold HTTP
    dl.sessionDetailMeta
      mixin arrayList(session.ho, "Hosts", "host.http")
      mixin arrayList(session.ua, "User Agents", "ua")
      mixin ipArrayList(session.xff, session.gxff, session.asxff, "XFFs", "xff")
      mixin arrayList(session.hh1, "Request Headers", "header.src")
      mixin arrayList(session.hsver, "Request Versions", "http.version.src")
      mixin arrayList(session.hh2, "Resp Headers", "header.dst")
      mixin arrayList(session.hdver, "Resp Versions", "http.version.dst")
      mixin arrayList(session.hmd5, "Body MD5s", "http.md5")
      if (session.hdrs)
        each value,i in reqFields 
          mixin arrayList(session.hdrs["hreq-" + value.name], value.name + " Header", "http." + value.name)
        each value,i in resFields 
          mixin arrayList(session.hdrs["hres-" + value.name], value.name + " Header", "http." + value.name)


  if (session.dnsip || session.dnsho)
    div.sessionDetailMeta.bold DNS
    dl.sessionDetailMeta
      mixin ipArrayList(session.dnsip, session.gdnsip, session.asdnsip, "IPs", "dns")
      mixin arrayList(session.dnsho, "Hosts", "host.dns")

  if (session.ircnck || session.ircch)
    div.sessionDetailMeta.bold IRC
    dl.sessionDetailMeta
      mixin arrayList(session.ircnck, "Nicks", "irc.nick")
      mixin arrayList(session.ircch, "Channels", "irc.channel")

  if (session.tls)
    div.sessionDetailMeta.bold TLS
    dl.sessionDetailMeta
      each cert in session.tls
        dt Certificate
        dd
          - if (cert.sn)
            | Serial: 
            a(href='#', onclick='return addExpression("cert.serial == #{cert.sn}");') #{cert.sn}
          - if (cert.iCn && Array.isArray(cert.iCn))
            |  Issuer Common: 
            each cn,i in cert.iCn
              if (i > 0)
                |, 
              a(href='#', onclick='return addExpression("cert.issuer.cn == \\\"#{cn}\\\"");') #{cn}
          - else if (cert.iCn)
            |  Issuer Common: 
            a(href='#', onclick='return addExpression("cert.issuer.cn == \\\"#{cert.iCn}\\\"");') #{cert.iCn}
          - if (cert.iOn)
            |  Issuer Org: 
            a(href='#', onclick='return addExpression("cert.issuer.on == \\\"#{cert.iOn}\\\"");') #{cert.iOn}
          - if (cert.sCn && Array.isArray(cert.sCn))
            |  Subject Common: 
            each cn,i in cert.sCn
              if (i > 0)
                |, 
              a(href='#', onclick='return addExpression("cert.subject.cn == \\\"#{cn}\\\"");') #{cn}
          - else if (cert.sCn)
            | Subject Common: 
            a(href='#', onclick='return addExpression("cert.subject.cn == \\\"#{cert.sCn}\\\"");') #{cert.sCn}
          - if (cert.sOn)
            |  Subject Org: 
            a(href='#', onclick='return addExpression("cert.subject.on == \\\"#{cert.sOn}\\\"");') #{cert.sOn}
          if (cert.alt)
            |  [
            each alt,i in cert.alt
              if (i > 0)
                |, 
              a(href='#', onclick='return addExpression("cert.alt == \\\"#{alt}\\\"");') #{alt}
            | ]


  if (session.sshkey || session.sshver)
    div.sessionDetailMeta.bold SSH
    dl.sessionDetailMeta
      mixin arrayList(session.sshkey, "Host Keys", "ssh.key")
      mixin arrayList(session.sshver, "Versions", "ssh.ver")
  if (user.emailSearch && (session.esub || session.esrc || session.edst || session.eua || session.eid || session.emv || session.ect || session.efn || session.emd5 || session.eip))
    div.sessionDetailMeta.bold Email
    dl.sessionDetailMeta
      mixin ipArrayList(session.eip, session.geip, session.aseip, "IPs", "email")
      mixin arrayList(session.esub, "Subjects", "email.subject")
      mixin arrayList(session.esrc, "Senders", "email.src")
      mixin arrayList(session.edst, "Destinations", "email.dst")
      mixin arrayList(session.eua, "User Agents", "email.ua")
      mixin arrayList(session.eid, "Message Ids", "email.id")
      mixin arrayList(session.emv, "Mime Versions", "email.mv")
      mixin arrayList(session.ect, "Content Types", "email.ct")
      mixin arrayList(session.efn, "Filenames", "email.fn")
      mixin arrayList(session.emd5, "Attachment MD5s", "email.md5")
      if (session.hdrs)
        each value,i in emailFields 
          mixin arrayList(session.hdrs["ehead-" + value.name], value.name + " Header", "email." + value.name)
  div.sessionDetailToolbar
    li
      options = ['natural', 'ascii', 'utf8', 'hex']
      for item in options
        input(type="radio",id="format-base-#{session.id}-#{item}",name="format-base-#{session.id}",value=item,checked=query.base==item) 
        label(for="format-base-#{session.id}-#{item}") #{item}
      input(id='format-line-#{session.id}', type="checkbox", checked=query.line=='true') 
      label(for='format-line-#{session.id}') Line Numbers
    li
      input(id='format-gzip-#{session.id}', type="checkbox", checked=query.gzip=='true') 
      label(for='format-gzip-#{session.id}') Decode GZip
    li
      input(id='format-image-#{session.id}', type="checkbox", checked=query.image=='true') 
      label(for='format-image-#{session.id}') Show Images &amp; Files
    li
      input(id='format-ts-#{session.id}', type="checkbox", checked=query.ts=='true')
      label(for='format-ts-#{session.id}') Show Timestamps
  br
  if (session.pa > 200)
    p 
      b Only showing first 200 packets
  table#textpacket
    tr
      th.textcol(id='srccol-#{session.id}') Source
      th.textcol(id='dstcol-#{session.id}') Destination

    each item, i in data
      tr
        if i % 2 == 0
          td.sessionsrc 
            if (item.ts)
              span(class="timestamp-#{session.id} sessionDetailTS", ts="#{item.ts}", bytes="#{item.bytes}")
            !{item.html}
          td
        else
          td
          td.sessiondst
            if (item.ts)
              span(class="timestamp-#{session.id} sessionDetailTS", ts="#{item.ts}", bytes="#{item.bytes}")
            !{item.html}

script(type='text/javascript').
  $(function() {
    if ($('input[name=format-base-#{session.id}]:checked').val() === "hex") {
      $('input#format-line-#{session.id}').removeAttr("disabled");
      $('label[for=format-line-#{session.id}]').css("color", "black");
    } else {
      $('input#format-line-#{session.id}').attr("disabled", true);
      $('label[for=format-line-#{session.id}]').css("color", "gray");
    }

    $("#srccol-#{session.id}").each( function() {
      $(this).qtip({
        content: 'Source Bytes:<br><img src="#{session.no}/raw/#{session.id}.png?type=src">',
        style: 'light qtip-moloch',
        position: {
          my: 'top center',
          at: 'bottom center'
        }
      });
    });
    $("#dstcol-#{session.id}").each( function() {
      $(this).qtip({
        content: 'Destination Bytes:<br><img src="#{session.no}/raw/#{session.id}.png?type=dst">',
        style: 'light qtip-moloch',
        position: {
          my: 'top center',
          at: 'bottom center'
        }
      });
    });
    $(".imagetag-#{session.id}").each( function() {
      $(this).qtip({
        content: 'File Bytes:<br><img src="' + $(this).attr('href').replace("body", "bodypng") + '">',
        style: 'light qtip-moloch',
        position: {
          viewport: $(window)
        }
      });
    });
    $('#startTime-#{session.id}').html(dateString(#{session.fp}, " "));
    $('#stopTime-#{session.id}').html(dateString(#{session.lp}, " "));
    $('input#format-line-#{session.id}, input#format-gzip-#{session.id}, input#format-image-#{session.id}, input[name=format-base-#{session.id}]').on('change', function(e) {
      var base = $('input[name=format-base-#{session.id}]:checked').val();
      var url = "#{session.no}/#{session.id}/sessionDetail" +
                 "?base=" + base +
                 "&line=" + $('input#format-line-#{session.id}').is(':checked') + 
                 "&image=" + $('input#format-image-#{session.id}').is(':checked') + 
                 "&gzip=" + $('input#format-gzip-#{session.id}').is(':checked') +
                 "&ts=" + $('input#format-ts-#{session.id}').is(':checked');

      $("#sessionDetail#{session.id}").load(url);
      if (localStorage) {
        localStorage['moloch-line'] = $('input#format-line-#{session.id}').is(':checked');
        localStorage['moloch-base'] = base;
      }
    });
    function showTimestamps() {
      if (localStorage) {
        localStorage['moloch-ts'] = $('input#format-ts-#{session.id}').is(':checked');
      }
      if ( $('#format-ts-#{session.id}').is(':checked')) {
        $('.timestamp-#{session.id}').each(function(index, item) {
          if ($(item).attr("ts")) {
            var val = +$(item).attr("ts");
            var str = dateString(val/1000, " ") + "." + val%1000;
            str += " <span style='float:right;'>" + $(item).attr("bytes") + " bytes</span>";
            $(item).html(str + "<hr>");
          }
          return item;
        }).show();
      } else {
        $('.timestamp-#{session.id}').hide();
      }
    }
    $('#format-ts-#{session.id}').on('change', showTimestamps);
    showTimestamps();
  });
